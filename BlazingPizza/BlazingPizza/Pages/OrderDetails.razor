@page "/myorders/{orderId:int}"
@using System.Threading
@inject HttpClient Http
@implements IDisposable

<div class="main">
    @if (invalidOrder)
    {
        <h2>Nope</h2>
        <p>Sorry, this order could not be loaded.</p>
    }
    else if (orderWithStatus == null)
    {
        <text>Loading...</text>
    }
    else
    {
        <div class="track-order">
            <div class="track-order-title">
                <h2>
                    Order placed @orderWithStatus.Order.CreatedTime.ToLongDateString()
                </h2>
                <p class="ml-auto mb-0">
                    Status: <strong>@orderWithStatus.StatusText</strong>
                </p>
            </div>
            <div class="track-order-body">
                <div class="track-order-details">
                    <div class="track-order-details">
                        <OrderReview Order="orderWithStatus.Order" />
                    </div>
                </div>
            </div>
        </div>
    }
</div>


@code {
    OrderWithStatus orderWithStatus;
    bool invalidOrder;
    CancellationTokenSource cancellationTokenSource;
    [Parameter] public int OrderId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        cancellationTokenSource?.Cancel();
        await PollForUpdatesAsync();
    }

    async Task PollForUpdatesAsync()
    {
        cancellationTokenSource = new CancellationTokenSource();
        while (!cancellationTokenSource.IsCancellationRequested)
        {
            try
            {
                invalidOrder = false;
                orderWithStatus = await Http.GetJsonAsync<OrderWithStatus>($"orders/{OrderId}");
            }
            catch (Exception ex)
            {
                invalidOrder = true;
                cancellationTokenSource.Cancel();
                Console.WriteLine(ex);
            }

            StateHasChanged();
            await Task.Delay(4000);
        }
    }

    void IDisposable.Dispose()
    {
        cancellationTokenSource?.Cancel();
    }
}
